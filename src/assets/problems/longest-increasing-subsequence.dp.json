{
    "name": "Longest Increasing Subsequence",
    "problem-statement": "You are given an array of <b>n</b> numbers <b>arr[0], . . . , arr[n-1]</b>. A subsequence is any subset of these numbers taken in order, of the form <b>arr[i0], arr[i1], ... , arr[ik]</b> where <b>0 <= i0 < i1 < · · · < ik < n</b>, and an increasing subsequence is one in which the numbers are getting strictly larger. The goal of the problem is to find the increasing subsequence of greatest length.",
    "input": {
        "arr": "Input Array",
        "n": "Length of Input Array (Equal to <b>arr.length</b>)"
    },
    "output": {
        "result": "The length of the longest increasing subsequence",
        "solution": "The indices of the elements in the longest increasing subsequence (note that the indices rather than the elements themselves should be returned, since the indices are unique)"
    },
    "provided-solution": {
        "tableShape": "1d",
        "tableDimension1": "n",
        "initializationCode": "// No other initialization necessary",
        "for1Variable": "i",
        "for1Init": "0",
        "for1Condition": "i < n",
        "for1Update": "i = i + 1",
        "setNextEntryCode": "// In the worst case, the longest increasing subsequence ending\n// at i is the element at i itself, with length 1\n// We start with this assumption, then see if we can improve it\n\nfor (j = 0; j < i; j++) {\n    // for every previous index j, check if we can get a better\n    // result by extending the sequence ending at that index\n    const previousSequenceLength = T(j);\n    if (entry < previousSequenceLength + 1 && arr[i] > arr[j]) {\n        entry = previousSequenceLength + 1;\n    }\n}",
        "defaultTableEntry": "1",
        "useDefaultTableEntry": true,
        "returnValueCode": "let result = 0;\n\n// We need to return the max of the table entries\nfor (let i = 0; i < n; i++) {\n   const possibleMax = T(i);\n if (possibleMax > result) {\n       result = possibleMax;\n }\n}",
        "nextEntryIndex1": "i",
        "setNextEntryTopDownCode": "// In the worst case, the longest increasing subsequence ending\n// at i is the element at i itself, with length 1\n// We start with this assumption, then see if we can improve it\n\nfor (j = 0; j < i; j++) {\n    // for every previous index j, check if we can get a better\n    // result by extending the sequence ending at that index\n    const previousSequenceLength = getTableEntry(j);\n    if (entry < previousSequenceLength + 1 && arr[i] > arr[j]) {\n        entry = previousSequenceLength + 1;\n    }\n}",
        "returnValueTopDownCode": "let result = 0;\n\n// We need to return the max of the table entries\nfor (let i = 0; i < n; i++) {\n    const possibleMax = getTableEntry(i);\n    if (possibleMax > result) {\n        result = possibleMax;\n    }\n}",
        "useAuxiliaryTableWithDetailedSolution": true,
        "detailedSetNextEntryCode": "// In the worst case, the longest increasing subsequence ending\n// at i is the element at i itself, with length 1\n// We start with this assumption, then see if we can improve it\n\n// We also store the index of the last element of the\n// subsequence that was extended (initially null)\nlet secondaryEntry = null;\n\nfor (j = 0; j < i; j++) {\n    // for every previous index j, check if we can get a better\n    // result by extending the sequence ending at that index\n    const previousSequenceLength = T(j);\n    if (entry < previousSequenceLength + 1 && arr[i] > arr[j]) {\n        entry = previousSequenceLength + 1;\n        secondaryEntry = j;\n    }\n}",
        "detailedReturnValueCode": "let result = 0;\nlet lastItemIndex = null;\n\n// We need to return the max of the table entries\nfor (let i = 0; i < n; i++) {\n    const possibleMax = T(i);\n    if (possibleMax > result) {\n        result = possibleMax;\n        lastItemIndex = i;\n    }\n}\n\nlet solution = [];\n// backtrack from the end\nwhile (lastItemIndex !== null) {\n    solution.unshift(lastItemIndex); // append to front\n    lastItemIndex = T2(lastItemIndex);\n}",
        "detailedSetNextEntryTopDownCode": "// In the worst case, the longest increasing subsequence ending\n// at i is the element at i itself, with length 1\n// We start with this assumption, then see if we can improve it\n\n// We also store the index of the last element of the\n// subsequence that was extended (initially null)\nlet secondaryEntry = null;\n\nfor (j = 0; j < i; j++) {\n    // for every previous index j, check if we can get a better\n    // result by extending the sequence ending at that index\n    const previousSequenceLength = getTableEntry(j);\n    if (entry < previousSequenceLength + 1 && arr[i] > arr[j]) {\n        entry = previousSequenceLength + 1;\n        secondaryEntry = j;\n    }\n}",
        "detailedReturnValueTopDownCode": "let result = 0;\nlet lastItemIndex = null;\n\n// We need to return the max of the table entries\nfor (let i = 0; i < n; i++) {\n    const possibleMax = getTableEntry(i);\n    if (possibleMax > result) {\n        result = possibleMax;\n        lastItemIndex = i;\n    }\n}\n\nlet solution = [];\n// backtrack from the end\nwhile (lastItemIndex !== null) {\n    solution.unshift(lastItemIndex); // append to front\n    lastItemIndex = T2(lastItemIndex);\n}",
        "tableEntryDefinition": "<b>T[ i ]</b> is the length of the longest increasing subsequence whose last element is at index <b>i</b>",
        "auxiliaryTableEntryDefinition": "<b>T2[ i ]</b> is the index of the second last element of the longest increasing subsequence whose last element is at index <b>i</b>",
        "solutionNotes": "This solution runs in <b>O(n<sup>2</sup>)</b> time. Note that it is not enough to store the length of the longest increasing subsequence within the first <b>i</b> elements - we must use a stricter condition so that we know which sequences can be extended when checking previous table entries. This also means that we need to return the largest value of the table entries as our final result, since the longest subsequence may end at any index of the table."
    },
    "test-cases": [
        {
            "name": "Test Case 1",
            "input": {
                "n": 8,
                "arr": [
                    5,
                    7,
                    4,
                    -3,
                    9,
                    1,
                    4,
                    8
                ]
            }
        },
        {
            "name": "Test Case 2",
            "input": {
                "n": 13,
                "arr": [
                    7,
                    11,
                    -5,
                    -2,
                    5,
                    1,
                    16,
                    6,
                    7,
                    11,
                    8,
                    9,
                    0
                ]
            }
        },
        {
            "name": "Test Case 3",
            "input": {
                "n": 20,
                "arr": [
                    0,
                    1,
                    1,
                    8,
                    9,
                    9,
                    9,
                    8,
                    8,
                    1,
                    9,
                    9,
                    9,
                    1,
                    1,
                    9,
                    7,
                    2,
                    5,
                    3
                ]
            }
        },
        {
            "name": "Edge Case 1",
            "input": {
                "n": 1,
                "arr": [
                    0
                ]
            }
        },
        {
            "name": "Edge Case 2",
            "input": {
                "n": 1,
                "arr": [
                    1
                ]
            }
        },
        {
            "name": "Edge Case 3",
            "input": {
                "n": 0,
                "arr": [
                ]
            }
        },
        {
            "name": "Edge Case 4",
            "input": {
                "n": 10,
                "arr": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ]
            }
        },
        {
            "name": "Edge Case 5",
            "input": {
                "n": 10,
                "arr": [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    0
                ]
            }
        }
    ]
}
