{
    "name": "Longest Common Subsequence",
    "problem-statement": "For an array of the form <b>arr[0], . . . , arr[n - 1]</b>, a subsequence is any subset of <b>arr[0], . . . , arr[n - 1]</b> taken in order, of the form <b>arr[i0], arr[i1], ... , arr[ik]</b> where <b>0 <= i0 < i1 < · · · < ik < n</b>. The goal of the problem is to find the longest common subsequence between two input arrays, <b>arr1</b> and <b>arr1</b>.",
    "input": {
        "arr1": "First Input Array",
        "arr2": "Second Input Array",
        "n1": "Length of First Input Array (Equal to <b>arr1.length</b>)",
        "n2": "Length of Second Input Array (Equal to <b>arr2.length</b>)"
    },
    "output": {
        "result": "The length of the longest common subsequence",
        "solution": "The elements of the longest common subsequence taken in order"
    },
    "provided-solution": {
        "tableShape": "2d",
        "tableDimension1": "n1 + 1",
        "tableDimension2": "n2 + 1",
        "initializationCode": "// No other initialization necessary",
        "for1Variable": "i",
        "for1Init": "0",
        "for1Condition": "i <= n1",
        "for1Update": "i = i + 1",
        "for2Variable": "j",
        "for2Init": "0",
        "for2Condition": "j <= n2",
        "for2Update": "j = j + 1",
        "setNextEntryCode": "if (i === 0 || j === 0) {\n    entry = 0;\n} else if (arr1[i - 1] === arr2[j - 1]) {\n    entry = T(i - 1, j - 1) + 1;\n} else {\n    entry = Math.max(T(i - 1, j), T(i, j - 1));\n}",
        "defaultTableEntry": "",
        "useDefaultTableEntry": false,
        "returnValueCode": "result = T(n1, n2);",
        "nextEntryIndex1": "i",
        "nextEntryIndex2": "j",
        "setNextEntryTopDownCode": "if (i === 0 || j === 0) {\n    entry = 0;\n} else if (arr1[i - 1] === arr2[j - 1]) {\n    entry = getTableEntry(i - 1, j - 1) + 1;\n} else {\n    entry = Math.max(getTableEntry(i - 1, j), getTableEntry(i, j - 1));\n}",
        "returnValueTopDownCode": "result = getTableEntry(n1, n2);",
        "useAuxiliaryTableWithDetailedSolution": false,
        "detailedSetNextEntryCode": "if (i === 0 || j === 0) {\n    entry = 0;\n} else if (arr1[i - 1] === arr2[j - 1]) {\n    entry = T(i - 1, j - 1) + 1;\n} else {\n    entry = Math.max(T(i - 1, j), T(i, j - 1));\n}",
        "detailedReturnValueCode": "const result = T(n1, n2);\nconst solution = []\nlet i = n1;\nlet j = n2;\nwhile (i > 0 && j > 0) {\n    if (arr1[i - 1] == arr2[j - 1]) {\n        solution.unshift(arr1[i - 1]);\n        i--;\n        j--;        // reduce values of i and j\n    } else if (T(i - 1, j) > T(i, j - 1)) {\n        i--;\n    } else {\n        j--;\n    }\n}",
        "detailedSetNextEntryTopDownCode": "if (i === 0 || j === 0) {\n    entry = 0;\n} else if (arr1[i - 1] === arr2[j - 1]) {\n    entry = getTableEntry(i - 1, j - 1) + 1;\n} else {\n    entry = Math.max(getTableEntry(i - 1, j), getTableEntry(i, j - 1));\n}",
        "detailedReturnValueTopDownCode": "const result = getTableEntry(n1, n2);\nconst solution = []\nlet i = n1;\nlet j = n2;\nwhile (i > 0 && j > 0) {\n    if (arr1[i - 1] == arr2[j - 1]) {\n        solution.unshift(arr1[i - 1]);\n        i--;\n        j--;        // reduce values of i and j\n    } else if (getTableEntry(i - 1, j) > getTableEntry(i, j - 1)) {\n        i--;\n    } else {\n        j--;\n    }\n}",
        "tableEntryDefinition": "<b>T[ i ][ j ]</b> Is the longest common subsequence between <b>arr1[0], . . . , arr1[i - 1]</b> and <b>arr2[0], . . . , arr2[j - 1]</b>.",
        "solutionNotes": "This solution runs in <b>O(n1 * n2)</b> time. When populating <b>T[ i ][ j ]</b>, we consider the case where <b>arr1[i - 1]</b> and <b>arr2[j - 1]</b> match, and the case where they do not."
    },
    "test-cases": [
        {
            "name": "Test Case 1",
            "input": {
                "n1": 8,
                "n2": 12,
                "arr1": [
                    "m",
                    "o",
                    "m",
                    "j",
                    "e",
                    "a",
                    "n",
                    "s"
                ],
                "arr2": [
                    "m",
                    "p",
                    "o",
                    "g",
                    "r",
                    "e",
                    "b",
                    "i",
                    "n",
                    "s",
                    "k",
                    "y"
                ]
            }
        },
        {
            "name": "Test Case 2",
            "input": {
                "n1": 7,
                "n2": 7,
                "arr1": [
                    "t",
                    "a",
                    "n",
                    "g",
                    "l",
                    "e",
                    "d"
                ],
                "arr2": [
                    "a",
                    "l",
                    "a",
                    "d",
                    "d",
                    "i",
                    "n"
                ]
            }
        },
        {
            "name": "Test Case 3",
            "input": {
                "n1": 9,
                "n2": 9,
                "arr1": [
                    "t",
                    "o",
                    "m",
                    "r",
                    "i",
                    "d",
                    "d",
                    "l",
                    "e"
                ],
                "arr2": [
                    "v",
                    "o",
                    "l",
                    "d",
                    "e",
                    "m",
                    "o",
                    "r",
                    "t"
                ]
            }
        },
        {
            "name": "Edge Case 1",
            "input": {
                "n1": 0,
                "n2": 0,
                "arr1": [
                ],
                "arr2": [
                ]
            }
        },
        {
            "name": "Edge Case 2",
            "input": {
                "n1": 1,
                "n2": 1,
                "arr1": [
                    "A"
                ],
                "arr2": [
                    "A"
                ]
            }
        },
        {
            "name": "Edge Case 3",
            "input": {
                "n1": 1,
                "n2": 1,
                "arr1": [
                    "A"
                ],
                "arr2": [
                    "B"
                ]
            }
        },
        {
            "name": "Edge Case 4",
            "input": {
                "n1": 4,
                "n2": 4,
                "arr1": [
                    "A",
                    "B",
                    "C",
                    "D"
                ],
                "arr2": [
                    "A",
                    "B",
                    "C",
                    "D"
                ]
            }
        },
        {
            "name": "Edge Case 5",
            "input": {
                "n1": 4,
                "n2": 4,
                "arr1": [
                    "A",
                    "B",
                    "C",
                    "D"
                ],
                "arr2": [
                    "D",
                    "C",
                    "B",
                    "A"
                ]
            }
        }
    ]
}
