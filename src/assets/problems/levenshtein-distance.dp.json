{
    "name": "Levenshtein Distance",
    "problem-statement": "TODO: write",
    "input": {
        "arr1": "First Input Array",
        "arr2": "Second Input Array",
        "n1": "Length of First Input Array (Equal to <b>arr1.length</b>)",
        "n2": "Length of Second Input Array (Equal to <b>arr2.length</b>)"
    },
    "output": {
        "result": "The Levenshtein distance between the 2 input arrays"
    },
    "provided-solution": {
        "tableShape": "2d",
        "tableDimension1": "n1 + 1",
        "tableDimension2": "n2 + 1",
        "initializationCode": "// No other initialization necessary",
        "for1Variable": "i",
        "for1Init": "0",
        "for1Condition": "i <= n1",
        "for1Update": "i = i + 1",
        "for2Variable": "j",
        "for2Init": "0",
        "for2Condition": "j <= n2",
        "for2Update": "j = j + 1",
        "setNextEntryCode": "if (i === 0) {\n    entry = j;\n} else if (j === 0) {\n    entry = i;\n} else if(arr1[i - 1] === arr2[j - 1]) {\n    entry = T(i - 1, j - 1);\n} else {\n    entry = 1 + Math.min(\n        T(i, j - 1),\n        T(i - 1, j),\n        T(i - 1, j - 1)\n    );\n}",
        "defaultTableEntry": "",
        "useDefaultTableEntry": false,
        "returnValueCode": "result = T(n1, n2);",
        "nextEntryIndex1": "i",
        "nextEntryIndex2": "j",
        "setNextEntryTopDownCode": "if (i === 0) {\n    entry = j;\n} else if (j === 0) {\n    entry = i;\n} else if(arr1[i - 1] === arr2[j - 1]) {\n    entry = getTableEntry(i - 1, j - 1);\n} else {\n    entry = 1 + Math.min(\n        getTableEntry(i, j - 1),\n        getTableEntry(i - 1, j),\n        getTableEntry(i - 1, j - 1)\n    );\n}",
        "returnValueTopDownCode": "result = getTableEntry(n1, n2);",
        "tableEntryDefinition": "TODO: Write",
        "solutionNotes": "TODO: Write"
    },
    "test-cases": [
        {
            "name": "Test Case 1",
            "input": {
                "n1": 7,
                "n2": 7,
                "arr1": [
                    "t",
                    "a",
                    "n",
                    "g",
                    "l",
                    "e",
                    "d"
                ],
                "arr2": [
                    "a",
                    "l",
                    "a",
                    "d",
                    "d",
                    "i",
                    "n"
                ]
            }
        },
        {
            "name": "Test Case 2",
            "input": {
                "n1": 11,
                "n2": 10,
                "arr1": [
                    "E",
                    "X",
                    "P",
                    "O",
                    "N",
                    "E",
                    "N",
                    "T",
                    "I",
                    "A",
                    "L"
                ],
                "arr2": [
                    "P",
                    "O",
                    "L",
                    "Y",
                    "N",
                    "O",
                    "M",
                    "I",
                    "A",
                    "L"
                ]
            }
        },
        {
            "name": "Test Case 3",
            "input": {
                "n1": 6,
                "n2": 7,
                "arr1": [
                    "A",
                    "B",
                    "A",
                    "Z",
                    "D",
                    "C"
                ],
                "arr2": [
                    "B",
                    "A",
                    "C",
                    "B",
                    "A",
                    "D",
                    "Z"
                ]
            }
        },
        {
            "name": "Test Case 4",
            "input": {
                "n1": 9,
                "n2": 9,
                "arr1": [
                    "t",
                    "o",
                    "m",
                    "r",
                    "i",
                    "d",
                    "d",
                    "l",
                    "e"
                ],
                "arr2": [
                    "v",
                    "o",
                    "l",
                    "d",
                    "e",
                    "m",
                    "o",
                    "r",
                    "t"
                ]
            }
        },
        {
            "name": "Edge Case 1",
            "input": {
                "n1": 0,
                "n2": 0,
                "arr1": [
                ],
                "arr2": [
                ]
            }
        },
        {
            "name": "Edge Case 2",
            "input": {
                "n1": 1,
                "n2": 1,
                "arr1": [
                    "A"
                ],
                "arr2": [
                    "A"
                ]
            }
        },
        {
            "name": "Edge Case 3",
            "input": {
                "n1": 1,
                "n2": 1,
                "arr1": [
                    "A"
                ],
                "arr2": [
                    "B"
                ]
            }
        },
        {
            "name": "Edge Case 4",
            "input": {
                "n1": 4,
                "n2": 4,
                "arr1": [
                    "A",
                    "B",
                    "C",
                    "D"
                ],
                "arr2": [
                    "A",
                    "B",
                    "C",
                    "D"
                ]
            }
        },
        {
            "name": "Edge Case 5",
            "input": {
                "n1": 4,
                "n2": 4,
                "arr1": [
                    "A",
                    "B",
                    "C",
                    "D"
                ],
                "arr2": [
                    "D",
                    "C",
                    "B",
                    "A"
                ]
            }
        }
    ]
}
