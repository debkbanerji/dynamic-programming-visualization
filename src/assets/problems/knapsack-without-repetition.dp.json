{
    "name": "Knapsack Without Repetition",
    "problem-statement": "You are a roguish thief who has broken into a comically well decorated house. You have with you a knapsack of weight capacity <b>W</b>, where <b>W</b> is an integer. There are <b>n</b> items in the house, each of integer weight and some value. It is your goal to maximize the combined value of the items that you can fit in your knapsack.<br><br>For this version of the problem, there exists exactly one of each item, so you cannot take the same item twice.",
    "input": {
        "W": "Maximum Capacity",
        "n": "Number of Items",
        "weights": "array of item weights, where entry i represents the weight of item i",
        "values": "array of item values, where entry i represents the value of item i"
    },
    "output": {
        "result": "The maximum value that can be attained with a knapsack of capacity W",
        "solution": "An array of the item indices that lead to this maximum value"
    },
    "provided-solution": {
        "tableShape": "2d",
        "tableDimension1": "n + 1",
        "tableDimension2": "W + 1",
        "initializationCode": "// No other initialization necessary",
        "for1Variable": "i",
        "for1Init": "0",
        "for1Condition": "i < n + 1",
        "for1Update": "i = i + 1",
        "for2Variable": "j",
        "for2Init": "0",
        "for2Condition": "j < W + 1",
        "for2Update": "j = j + 1",
        "setNextEntryCode": "if (i == 0 || j == 0) {\n\tentry = 0;\n} else {\n\tlet itemWeight = weights[i - 1];\n\tlet valueWithoutLastItem = T(i - 1, j);\n\tif (itemWeight > j) {\n\t\tentry = valueWithoutLastItem;\n\t} else {\n\t\tlet valueWithLastItem = T(i - 1, j - itemWeight) + values[i - 1];\n\t\tif (valueWithLastItem > valueWithoutLastItem) {\n\t\t\tentry = valueWithLastItem;\n\t\t} else {\n\t\t\tentry = valueWithoutLastItem;\n\t\t}\n\t}\n}",
        "defaultTableEntry": "",
        "useDefaultTableEntry": false,
        "returnValueCode": "result = T(n, W);",
        "nextEntryIndex1": "i",
        "nextEntryIndex2": "j",
        "setNextEntryTopDownCode": "if (i == 0 || j == 0) {\n\tentry = 0;\n} else {\n\tlet itemWeight = weights[i - 1];\n\tlet valueWithoutLastItem = getTableEntry(i - 1, j);\n\tif (itemWeight > j) {\n\t\tentry = valueWithoutLastItem;\n\t} else {\n\t\tlet valueWithLastItem = getTableEntry(i - 1, j - itemWeight) + values[i - 1];\n\t\tif (valueWithLastItem > valueWithoutLastItem) {\n\t\t\tentry = valueWithLastItem;\n\t\t} else {\n\t\t\tentry = valueWithoutLastItem;\n\t\t}\n\t}\n}",
        "returnValueTopDownCode": "result = getTableEntry(n, W);",
        "useAuxiliaryTableWithDetailedSolution": false,
        "detailedSetNextEntryCode": "if (i == 0 || j == 0) {\n\tentry = 0;\n} else {\n\tlet itemWeight = weights[i - 1];\n\tlet valueWithoutLastItem = T(i - 1, j);\n\tif (itemWeight > j) {\n\t\tentry = valueWithoutLastItem;\n\t} else {\n\t\tlet valueWithLastItem = T(i - 1, j - itemWeight) + values[i - 1];\n\t\tif (valueWithLastItem > valueWithoutLastItem) {\n\t\t\tentry = valueWithLastItem;\n\t\t} else {\n\t\t\tentry = valueWithoutLastItem;\n\t\t}\n\t}\n}",
        "detailedReturnValueCode": "const result = T(n, W);\n\nconst solution = [];\nlet i = n;\nlet j = W;\n\nwhile (i > 0 && j > 0) {\n   if (T(i - 1, j) !== T(i, j)) {\n        solution.unshift(i - 1); // appending correct item index to front of solution\n        j = j - weights[i - 1];  \n    }\n    i = i - 1;\n}",
        "detailedSetNextEntryTopDownCode": "if (i == 0 || j == 0) {\n\tentry = 0;\n} else {\n\tlet itemWeight = weights[i - 1];\n\tlet valueWithoutLastItem = getTableEntry(i - 1, j);\n\tif (itemWeight > j) {\n\t\tentry = valueWithoutLastItem;\n\t} else {\n\t\tlet valueWithLastItem = getTableEntry(i - 1, j - itemWeight) + values[i - 1];\n\t\tif (valueWithLastItem > valueWithoutLastItem) {\n\t\t\tentry = valueWithLastItem;\n\t\t} else {\n\t\t\tentry = valueWithoutLastItem;\n\t\t}\n\t}\n}",
        "detailedReturnValueTopDownCode": "const result = getTableEntry(n, W);\n\nconst solution = [];\nlet i = n;\nlet j = W;\n\nwhile (i > 0 && j > 0) {\n    if (T(i - 1, j) !== T(i, j)) {\n        solution.unshift(i - 1); // appending correct item index to front of solution\n        j = j - weights[i - 1];  \n    }\n    i = i - 1;\n}",
        "tableEntryDefinition": "<b>T[ i ][ j ]</b> Is the maximum value obtainable with a knapsack of capacity <b>i</b> using the first <b>j</b> items.",
        "solutionNotes": "This solution runs in <b>O(nW)</b> time. When populating <b>T[ i ][ j ]</b>, we consider the case where we would take item <b>j</b>, as well as the case where we would not take item <b>j</b>."
    },
    "test-cases": [
        {
            "name": "Test Case 1",
            "input": {
                "W": 10,
                "n": 4,
                "weights": [
                    6,
                    3,
                    4,
                    2
                ],
                "values": [
                    30,
                    14,
                    16,
                    9
                ]
            }
        },
        {
            "name": "Test Case 2",
            "input": {
                "W": 6,
                "n": 4,
                "weights": [
                    1,
                    2,
                    3,
                    4
                ],
                "values": [
                    12,
                    17,
                    18,
                    25
                ]
            }
        },
        {
            "name": "Test Case 3",
            "input": {
                "W": 7,
                "n": 5,
                "weights": [
                    1,
                    2,
                    3,
                    4,
                    6
                ],
                "values": [
                    12,
                    17,
                    18,
                    25,
                    30
                ]
            }
        },
        {
            "name": "Test Case 4",
            "input": {
                "W": 16,
                "n": 8,
                "weights": [
                    1,
                    2,
                    3,
                    4,
                    6,
                    5,
                    9,
                    5
                ],
                "values": [
                    12,
                    17,
                    18,
                    25,
                    30,
                    23,
                    54,
                    75
                ]
            }
        },
        {
            "name": "Edge Case 1",
            "input": {
                "W": 0,
                "n": 5,
                "weights": [
                    1,
                    2,
                    3,
                    4,
                    6
                ],
                "values": [
                    12,
                    17,
                    18,
                    25,
                    30
                ]
            }
        },
        {
            "name": "Edge Case 2",
            "input": {
                "W": 4,
                "n": 0,
                "weights": [
                ],
                "values": [
                ]
            }
        }
    ]
}
