{
    "name": "Chain Matrix Multiplication",
    "problem-statement": "Chain Matrix Multiplication (DPV section 6.5)",
    "input": {
        "n": "Number of matrices",
        "dimensions": "Array of matrix dimensions, with length n + 1"
    },
    "output": {
        "result": "The minimum number of operations required to multiply all the matrices together"
    },
    "provided-solution": {
        "tableShape": "2d",
        "tableDimension1": "n",
        "tableDimension2": "n",
        "initializationCode": "// No other initialization necessary",
        "for1Variable": "L",
        "for1Init": "0",
        "for1Condition": "L <= n",
        "for1Update": "L = L + 1",
        "for2Variable": "i",
        "for2Init": "0",
        "for2Condition": "i < n - L",
        "for2Update": "i = i + 1",
        "setNextEntryCode": "j = i + L;\nif (L == 0) {\n    entry = 0;\n} else {\n    let optimalCost = Number.MAX_VALUE; // optimal cost of the subproblem defined by i, j\n    for (k = i; k < j; k++) {\n        // kOpt is the optimal cost if we had split at k\n        kOpt = T(i, k) // optimal cost of left subproblem\n            + T(k + 1, j)  // optimal cost of right subproblem\n            + dimensions[i] * dimensions[k + 1] * dimensions[j + 1]; // cost to combine the two subproblems\n        if (kOpt < optimalCost) {\n            optimalCost = kOpt;\n        }\n    }\n    entry = optimalCost; // write the optimal cost into entry i,j\n}",
        "defaultTableEntry": "",
        "useDefaultTableEntry": false,
        "returnValueCode": "result = T(0, n - 1);",
        "nextEntryIndex1": "i",
        "nextEntryIndex2": "j",
        "useAuxiliaryTableWithDetailedSolution": true,
        "tableEntryDefinition": "<b>T[ i ][ j ]</b> Is the minimum cost of multiplying all the matrices from matrix <b>i</b> to matrix <b>j</b> together"
    },
    "test-cases": [
        {
            "name": "Test Case 1",
            "input": {
                "n": 7,
                "dimensions": [
                    5,
                    2,
                    4,
                    10,
                    8,
                    5,
                    5,
                    2
                ]
            }
        },
        {
            "name": "Test Case 2",
            "input": {
                "n": 7,
                "dimensions": [
                    5,
                    3,
                    4,
                    7,
                    8,
                    3,
                    5,
                    9
                ]
            }
        },
        {
            "name": "Test Case 3",
            "input": {
                "n": 4,
                "dimensions": [
                    40,
                    30,
                    10,
                    15,
                    30
                ]
            }
        },
        {
            "name": "Edge Case 1",
            "input": {
                "n": 1,
                "dimensions": [
                    10,
                    20
                ]
            }
        },
        {
            "name": "Edge Case 2",
            "input": {
                "n": 1,
                "dimensions": [
                    10,
                    20,
                    30
                ]
            }
        }
    ]
}
